{"ast":null,"code":"var _jsxFileName = \"/Users/malebomoleleki/Documents/GitHub/christianConnect/src/pages/notes/NoteContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { IonHeader, IonTitle, IonToolbar, IonPage, IonContent } from '@ionic/react';\nimport { GiSaveArrow } from 'react-icons/gi';\nimport { IoMdArrowBack } from 'react-icons/io';\nimport './NoteContent.css'; // import firebase tool\n\nimport { collection, addDoc } from 'firebase/firestore';\nimport { db, auth } from '../../firebase/firebase';\nimport { addNotes } from '../../firebase/firebase-help'; // get helping functions\n\nimport getCurTimeDate from '../../components/helpFunc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NoteContent() {\n  _s();\n\n  const [noteTile, setnoteTile] = useState();\n  const [noteContent, setnoteContent] = useState();\n  const dateObj = new Date();\n  const history = useHistory(); // used to route dynamically.\n\n  const [user, setUser] = useState(); // hold current user information\n\n  useEffect(() => {\n    var _auth$currentUser;\n\n    // get the value of auth.current user that keeps user's data.\n    var d = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.providerData[0].displayName; // console.log( JSON.parse( d ) ); // for debuggin purposes\n\n    setUser(JSON.parse(d)); // set user for this page\n  }, []);\n\n  const addUserNote = () => {\n    if (noteContent && noteTile) {\n      // call sync func and add data to firebase\n      addNotes(noteContent, noteTile, user.userId).then(feedback => {\n        // when adding is done running, do this.\n        // if no error\n        if (feedback.id) {\n          alert(\"NOTES SAVE\");\n          setnoteContent(\"\");\n          setnoteTile(\"\");\n          history.push(\"/notes\");\n        } // when something was wrong.. there was an error.\n        else {\n          alert(\"ERROR:PROBLEM\");\n          console.log(feedback);\n        }\n      });\n    } // when some fields are empty\n    else {\n      alert(\"Some Fields Are Empty\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(IonPage, {\n    id: \"bg\",\n    children: [/*#__PURE__*/_jsxDEV(IonHeader, {\n      id: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"./Notes\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(IoMdArrowBack, {\n          id: \"backIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 24\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(IonToolbar, {\n        children: /*#__PURE__*/_jsxDEV(IonTitle, {\n          id: \"title\",\n          children: \"New Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(IonContent, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"notTitle\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type title here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            autoFocus: true,\n            value: noteTile,\n            placeholder: \"note title\",\n            onChange: e => setnoteTile(e.target.value),\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"noteContent\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: noteContent,\n            onChange: e => setnoteContent(e.target.value),\n            placeholder: \"type notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GiSaveArrow, {\n          onClick: e => addUserNote(),\n          className: \"deleteIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n}\n\n_s(NoteContent, \"uVEgdkQzCr9Ict/8Smqf5nmjgU8=\", false, function () {\n  return [useHistory];\n});\n\n_c = NoteContent;\nexport default NoteContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteContent\");","map":{"version":3,"sources":["/Users/malebomoleleki/Documents/GitHub/christianConnect/src/pages/notes/NoteContent.jsx"],"names":["React","useState","useEffect","Link","useHistory","IonHeader","IonTitle","IonToolbar","IonPage","IonContent","GiSaveArrow","IoMdArrowBack","collection","addDoc","db","auth","addNotes","getCurTimeDate","NoteContent","noteTile","setnoteTile","noteContent","setnoteContent","dateObj","Date","history","user","setUser","d","currentUser","providerData","displayName","JSON","parse","addUserNote","userId","then","feedback","id","alert","push","console","log","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { IonHeader, IonTitle, IonToolbar, IonPage, IonContent } from '@ionic/react';\nimport { GiSaveArrow } from 'react-icons/gi'\nimport { IoMdArrowBack } from 'react-icons/io'\nimport './NoteContent.css'\n\n// import firebase tool\nimport { collection, addDoc } from 'firebase/firestore';\nimport { db, auth } from '../../firebase/firebase';\nimport { addNotes } from '../../firebase/firebase-help';\n\n\n// get helping functions\nimport getCurTimeDate from '../../components/helpFunc';\n\n\n\nfunction NoteContent() {\n\n\tconst [noteTile, setnoteTile] = useState();\n\tconst [noteContent, setnoteContent] = useState();\n\tconst dateObj = new Date();\n\tconst history = useHistory(); // used to route dynamically.\n  const [ user, setUser ] = useState(); // hold current user information\n\n\t\n\n\n\tuseEffect(() => {\n\n\n\t\t// get the value of auth.current user that keeps user's data.\n    var d = auth.currentUser?.providerData[0].displayName;\n    // console.log( JSON.parse( d ) ); // for debuggin purposes\n    setUser( JSON.parse( d ) ) // set user for this page\n\t}, [])\n\n\n\n\n\tconst addUserNote = () => {\n\t\tif( noteContent && noteTile ) {\n\t\t\t// call sync func and add data to firebase\n\t\t\taddNotes( noteContent, noteTile, user.userId ).then( feedback => { // when adding is done running, do this.\n\t\t\t\t// if no error\n\t\t\t\tif( feedback.id ) {\n\t\t\t\t\talert(\"NOTES SAVE\");\n\t\t\t\t\tsetnoteContent(\"\")\n\t\t\t\t\tsetnoteTile(\"\");\n\t\t\t\t\thistory.push(\"/notes\");\n\t\t\t\t}\n\t\t\t\t// when something was wrong.. there was an error.\n\t\t\t\telse { alert(\"ERROR:PROBLEM\"); console.log( feedback ) }\n\t\t\t})\n\t\t}\n\t\t// when some fields are empty\n\t\telse { alert(\"Some Fields Are Empty\"); }\n\t}\n\n\n\n\treturn (\n\t\t<IonPage id='bg'>\n\t\t\t{/* header */}\n\t\t\t<IonHeader id='header'>\n\n\t\t\t<Link to='./Notes'> <IoMdArrowBack id='backIcon' /> </Link>\n\t\t\t\t<IonToolbar>\n\t\t\t\t\t<IonTitle id='title'>New Notes</IonTitle>\n\t\t\t\t</IonToolbar>\n\t\t\t</IonHeader>\n\n\t\t\t<IonContent >\n\t\t\t\t<div className='note'>\n\n\t\t\t\t\t{/* { noteTile } | { noteContent } */}\n\n\t\t\t\t\t<div id=\"notTitle\" >\n\t\t\t\t\t\t<label >Type title here</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tvalue={ noteTile }\n\t\t\t\t\t\t\tplaceholder=\"note title\"\n\t\t\t\t\t\t\tonChange={ e=> setnoteTile( e.target.value ) }\n\t\t\t\t\t\t\ttype=\"text\" />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div id=\"noteContent\" >\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tvalue={ noteContent }\n\t\t\t\t\t\t\tonChange={ e => setnoteContent( e.target.value ) }\n\t\t\t\t\t\t\tplaceholder=\"type notes\" >\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</textarea>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* <span id='noteText'>Content here</span> */}\n\n\t\t\t\t\t<GiSaveArrow\n\t\t\t\t\t\tonClick={ e => addUserNote()  }\n\t\t\t\t\t\tclassName='deleteIcon'/>\n\t\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</IonContent>\n\t\t\t\n\t\t</IonPage>\n\t)\n}\n\nexport default NoteContent;"]},"metadata":{},"sourceType":"module"}