{"ast":null,"code":"import app, { db } from './firebase';\nimport firebase from \"firebase/compat/app\";\nimport { deleteDoc, doc, addDoc, collection, where, query, getDocs, limit, updateDoc } from 'firebase/firestore'; // get helping functions\n\nimport getCurTimeDate from '../components/helpFunc';\nimport { async } from '@firebase/util'; // THIS FUNCTION DELETES A NOTE DOCUMENT FROM FIREBASE.\n// IT'S RECEIVE A COLLECTION NAME AND DOCUMENT ID\n\nexport const deleteDocument = async (collec, id) => {\n  try {\n    const ref = await deleteDoc(doc(db, collec, id)).then(r => {// console.log( \"REF AFTER DEL NOTE: \",  r );\n    });\n  } catch (e) {\n    console.log(\"DELETING ERROR: \", e);\n    alert(\"Deleting Error\");\n  }\n}; // after user is logged in, get user data for use from firebase.\n// receives an id and email of user.\n\nexport const LoginUser = async uid => {\n  var data = [];\n\n  try {\n    const q = query(collection(db, \"Users\"), where(\"userId\", \"==\", uid), limit(1));\n    const snapShot = await getDocs(q);\n    snapShot.docs.map(doc => {\n      var d = doc.data();\n      d[\"id\"] = doc.id;\n      data.push(d); // console.log( data );\n    }); // console.log( data )\n\n    return data[0];\n  } catch (error) {\n    console.log(\"ERROR:\", error);\n    return null;\n  }\n}; // edit user account, currently can only edit firstname, lastname and phone number\n\n_c = LoginUser;\nexport const editUser = async (fn, ln, phone, id) => {\n  const usrref = doc(db, \"Users\", id);\n  const r = await updateDoc(usrref, {\n    firstname: fn,\n    lastname: ln,\n    phoneNumber: phone\n  }); // console.log( r )\n}; // func to upload users data to firestore\n// receives email, firstname(fname), lastname, password, phone numbe\n// profile photo, registration date and user id from authentication to ref\n// usser data in firestore\n\nexport const registerUser = async (email, fname, lname, pwd, phone, uid, fsName, wannaBeLeader) => {\n  var isReg = false;\n\n  try {\n    var _ref$id;\n\n    const ref = await addDoc(collection(db, \"Users\"), {\n      email: email,\n      firstname: fname,\n      lastname: lname,\n      password: pwd,\n      phoneNumber: phone,\n      profilePic: \"\",\n      regDate: getCurTimeDate(),\n      userId: uid,\n      isLeader: wannaBeLeader\n    }); // console.log(ref);\n\n    isReg = (_ref$id = ref.id) !== null && _ref$id !== void 0 ? _ref$id : true;\n\n    if (ref.id && wannaBeLeader) {\n      const fSRef = await addDoc(collection(db, \"Fellowships\"), {\n        name: fsName,\n        leaderId: uid,\n        about: \"\",\n        registrationDate: getCurTimeDate(),\n        time: \"\",\n        location: \"\",\n        photo: \"\"\n      });\n    }\n  } catch (error) {\n    console.log(\"ERROR: \", error);\n    isReg = false;\n  }\n\n  return isReg;\n}; // get leaders fellowship details from firestore.\n// receives a leaders user id from firebase auth\n\nexport const getLeaderFs = async uid => {\n  var data = [];\n\n  try {\n    const q = query(collection(db, \"Fellowships\"), where(\"leaderId\", \"==\", uid));\n    const ref = await getDocs(q);\n    ref.docs.map(doc => {\n      var d = doc.data();\n      d[\"id\"] = doc.id;\n      data.push(d);\n    });\n    return data[0];\n  } catch (error) {\n    console.error(\"ERROR:\", error);\n    return null;\n  }\n}; // ADDS A NOTE TO NOTES TABLE, RECEIVES, NOTECONTENT\n// note title and auth user id, it calls func that\n// return time and date\n\nexport const addNotes = async (nc, nt, uid) => {\n  try {\n    const ref = await addDoc(collection(db, \"notes\"), {\n      content: nc,\n      time: getCurTimeDate(),\n      title: nt,\n      userId: uid\n    });\n    return ref;\n  } catch (e) {\n    // if there is an error\n    console.log(e);\n    return null; // return null\n  }\n}; //\n// USED TO GET NOTES THAT BELONGS TO A SINGLE USER\n\nexport const getUserNotes = async uid => {\n  var data = [];\n\n  try {\n    // get all notes, where user id, == receives user id\n    const q = query(collection(db, \"notes\"), where(\"userId\", \"==\", uid));\n    const ref = await getDocs(q); // get the notes documents\n\n    ref.docs.map(doc => {\n      // map to go over all of em\n      // console.log( doc.data() );\n      // push data into the an array to return.\n      data.push({\n        id: doc.id,\n        // id of the doc online\n        userId: doc.data().userId,\n        // user who made this notes\n        content: doc.data().content,\n        // content of the notes\n        time: doc.data().time,\n        // time user made the notes\n        title: doc.data().title // title of the notes\n\n      });\n    }); // console.log( \"GET ALL NOTES FUNC: \", data ); // seeing purpose.\n    // a filter will be applied once log in is settle.\n\n    return data; // return notes to users.\n  } catch (e) {\n    console.error(\"Error Getting Notes:\", e);\n    return null;\n  }\n}; // THIS FUNCTION GET ALL THE DATA IN notes COLLECTION\n\nexport const getAllNotes = async () => {\n  var data = [];\n\n  try {\n    // get a reference to firebase doc\n    const ref = await getDocs(collection(db, \"notes\"));\n    ref.forEach(doc => {\n      // console.log( doc.id + \" => \", doc.data() )\n      // push data into the an array to return.\n      data.push({\n        id: doc.id,\n        // id of the doc online\n        userId: doc.data().userId,\n        // user who made this notes\n        content: doc.data().content,\n        // content of the notes\n        time: doc.data().time,\n        // time user made the notes\n        title: doc.data().title // title of the notes\n\n      });\n    }); // console.log( \"GET ALL NOTES FUNC: \", data ); // seeing purpose.\n    // a filter will be applied once log in is settle.\n\n    return data; // return notes to users.\n  } catch (e) {\n    console.error(\"GETTING NOTES ERROR: \", e);\n    return;\n  }\n}; // GETS ALL THE FELLOWSHIPS FROM FIREBASE\n\nexport const getAllFellowships = async () => {\n  const fsRef = await getDocs(collection(db, \"Fellowships\"));\n  var data = [];\n  fsRef.docs.map(doc => {\n    var d = doc.data();\n    d[\"id\"] = doc.id;\n    data.push(d);\n  });\n  if (data.length > 0) return data; // return all the fellowships.\n  else {\n    return null;\n  } // return null \n}; // ADD OR UPDATE USERS PROFILE PIC\n// receives user id from auth and a photo string\n\nexport const addProfileImg = async (uid, photo) => {\n  try {\n    const ref = await addDoc(collection(db, \"userProfilePic\"), {\n      userId: uid,\n      photo: photo\n    });\n    if (ref.id) return true;\n  } catch (err) {\n    console.error(\"Adding Pic\", err);\n    return false;\n  }\n}; // edit user account, currently can only edit firstname, lastname and phone number\n\nexport const updateProfileImg = async (uid, photo) => {\n  try {\n    const q = query(collection(db, \"userProfilePic\"), where(\"userId\", \"==\", uid), limit(1));\n    const ref = await getDocs(q);\n    var id;\n    ref.docs.map(doc => id = doc.id);\n\n    if (id) {\n      const usrref = doc(db, \"userProfilePic\", id);\n      await updateDoc(usrref, {\n        photo: photo\n      });\n    } else {\n      console.error(\"NO IMAGE ID\");\n    }\n  } catch (err) {\n    console.error(err);\n  } // console.log( r )\n\n}; // get user profile image from firebase\n// receives the user id from auth\n\nexport const getUserImg = async uid => {\n  // console.log( \"HERE\", uid )\n  // make a query to get user image from user profile pic, where user id\n  // = to params user id and the limit is one\n  try {\n    const q = query(collection(db, \"userProfilePic\"), where(\"userId\", \"==\", uid));\n    const res = await getDocs(q);\n    var data = [];\n    res.docs.map(doc => {\n      var d = doc.data();\n      d[\"id\"] = doc.id;\n      data.push(d);\n    }); // console.log( data[0] )\n\n    return data[0];\n  } catch (err) {\n    console.error(\"getting user profile::\", err);\n    return false;\n  }\n};\nexport default firebase;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginUser\");","map":{"version":3,"sources":["/Users/malebomoleleki/Documents/GitHub/christianConnect/src/firebase/firebase-help.js"],"names":["app","db","firebase","deleteDoc","doc","addDoc","collection","where","query","getDocs","limit","updateDoc","getCurTimeDate","async","deleteDocument","collec","id","ref","then","r","e","console","log","alert","LoginUser","uid","data","q","snapShot","docs","map","d","push","error","editUser","fn","ln","phone","usrref","firstname","lastname","phoneNumber","registerUser","email","fname","lname","pwd","fsName","wannaBeLeader","isReg","password","profilePic","regDate","userId","isLeader","fSRef","name","leaderId","about","registrationDate","time","location","photo","getLeaderFs","addNotes","nc","nt","content","title","getUserNotes","getAllNotes","forEach","getAllFellowships","fsRef","length","addProfileImg","err","updateProfileImg","getUserImg","res"],"mappings":"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","sourcesContent":["import app, { db } from './firebase';\nimport firebase from \"firebase/compat/app\";\n\nimport {\n  deleteDoc, doc, addDoc, collection, where, query, getDocs, limit, updateDoc\n} from 'firebase/firestore';\n\n\n// get helping functions\nimport getCurTimeDate from '../components/helpFunc';\nimport { async } from '@firebase/util';\n\n\n\n\n\n\n// THIS FUNCTION DELETES A NOTE DOCUMENT FROM FIREBASE.\n// IT'S RECEIVE A COLLECTION NAME AND DOCUMENT ID\nexport const deleteDocument = async ( collec, id ) => {\n  try {\n    const ref = await deleteDoc( doc( db, collec, id )).then((r)=> {\n      // console.log( \"REF AFTER DEL NOTE: \",  r );\n    });\n  }\n  catch( e ) {\n    console.log(\"DELETING ERROR: \", e );\n    alert(\"Deleting Error\");\n  }\n}\n\n\n// after user is logged in, get user data for use from firebase.\n// receives an id and email of user.\nexport const LoginUser = async ( uid ) => {\n  var data = [];\n  try {\n    const q = query(collection( db, \"Users\" ), where(\"userId\", \"==\", uid ), limit(1));\n    const snapShot = await getDocs( q );\n    snapShot.docs.map( doc => {\n      var d = doc.data();\n      d[\"id\"] = doc.id;\n      data.push( d );\n      // console.log( data );\n    })\n    // console.log( data )\n    return data[0]\n  }\n  catch( error ) {\n    console.log(\"ERROR:\", error )\n    return null;\n  }\n  \n}\n\n\n// edit user account, currently can only edit firstname, lastname and phone number\nexport const editUser = async (fn, ln, phone, id ) => {\n  const usrref = doc( db, \"Users\", id );\n\n  const r = await updateDoc( usrref, {\n    firstname: fn,\n    lastname: ln,\n    phoneNumber: phone\n  });\n  // console.log( r )\n}\n\n\n// func to upload users data to firestore\n// receives email, firstname(fname), lastname, password, phone numbe\n// profile photo, registration date and user id from authentication to ref\n// usser data in firestore\nexport const registerUser = async (\n  email,\n  fname,\n  lname,\n  pwd,\n  phone,\n  uid,\n  fsName,\n  wannaBeLeader\n) => {\n  var isReg = false;\n  try {\n    const ref = await addDoc(collection(db, \"Users\"), {\n      email: email,\n      firstname: fname,\n      lastname: lname,\n      password: pwd,\n      phoneNumber: phone,\n      profilePic: \"\",\n      regDate: getCurTimeDate(),\n      userId: uid,\n      isLeader: wannaBeLeader,\n    });\n    // console.log(ref);\n    isReg = ref.id ?? true;\n    if (ref.id && wannaBeLeader) {\n      const fSRef = await addDoc(collection(db, \"Fellowships\"), {\n        name: fsName,\n        leaderId: uid,\n        about: \"\",\n        registrationDate: getCurTimeDate(),\n        time: \"\",\n        location: \"\",\n        photo: \"\",\n      });\n    }\n  } catch (error) {\n    console.log(\"ERROR: \", error);\n    isReg = false;\n  }\n  return isReg;\n};\n\n\n// get leaders fellowship details from firestore.\n// receives a leaders user id from firebase auth\nexport const getLeaderFs = async( uid ) => {\n\n  var data = [];\n\n  try {\n    const q = query( collection(db, \"Fellowships\"), where(\"leaderId\", \"==\", uid ) );\n    const ref = await getDocs( q );\n\n    ref.docs.map( doc => {\n      var d = doc.data();\n      d[\"id\"] = doc.id;\n      data.push( d )\n    })\n    return data[0];\n  }\n  catch( error ) {\n    console.error(\"ERROR:\", error );\n    return null;\n  }\n}\n\n\n// ADDS A NOTE TO NOTES TABLE, RECEIVES, NOTECONTENT\n// note title and auth user id, it calls func that\n// return time and date\nexport const addNotes = async ( nc, nt, uid ) => {\n\n  try {\n    const ref = await addDoc( collection(db, \"notes\"), {\n      content: nc,\n      time: getCurTimeDate(),\n      title: nt,\n      userId: uid,\n    })\n    return ref;\t\n  }\n  catch( e ) { // if there is an error\n    console.log( e );\n    return null; // return null\n  }\t\n} \n\n//\n// USED TO GET NOTES THAT BELONGS TO A SINGLE USER\nexport const getUserNotes = async ( uid ) => {\n  var data = [];\n\n  try { // get all notes, where user id, == receives user id\n    const q = query( collection( db, \"notes\"), where(\"userId\", \"==\", uid));\n    const ref = await getDocs( q ); // get the notes documents\n\n    ref.docs.map( doc => { // map to go over all of em\n      // console.log( doc.data() );\n      // push data into the an array to return.\n      data.push({\n        id: doc.id, // id of the doc online\n        userId: doc.data().userId, // user who made this notes\n        content: doc.data().content, // content of the notes\n        time: doc.data().time, // time user made the notes\n        title: doc.data().title, // title of the notes\n      })\n    })\n    // console.log( \"GET ALL NOTES FUNC: \", data ); // seeing purpose.\n    // a filter will be applied once log in is settle.\n    return data; // return notes to users.\n  }\n  catch(e) { console.error(\"Error Getting Notes:\", e ); return null; }\n}\n\n\n// THIS FUNCTION GET ALL THE DATA IN notes COLLECTION\nexport const getAllNotes = async () => {\n  var data = [];\n\n  try { // get a reference to firebase doc\n    const ref = await getDocs( collection( db , \"notes\"));\n    ref.forEach( doc => {\n      // console.log( doc.id + \" => \", doc.data() )\n      // push data into the an array to return.\n      data.push({\n        id: doc.id, // id of the doc online\n        userId: doc.data().userId, // user who made this notes\n        content: doc.data().content, // content of the notes\n        time: doc.data().time, // time user made the notes\n        title: doc.data().title, // title of the notes\n      })\n    })\n    // console.log( \"GET ALL NOTES FUNC: \", data ); // seeing purpose.\n    // a filter will be applied once log in is settle.\n    return data; // return notes to users.\n  }\n  catch( e ) { console.error(\"GETTING NOTES ERROR: \", e ); return ; }\n}\n\n\n// GETS ALL THE FELLOWSHIPS FROM FIREBASE\nexport const getAllFellowships = async() => {\n  const fsRef = await getDocs( collection( db, \"Fellowships\" ) )\n\n  var data = [];\n  fsRef.docs.map( doc => {\n    var d = doc.data();\n    d[\"id\"] = doc.id;\n    data.push( d )\n  })\n  if( data.length > 0 ) return data; // return all the fellowships.\n  else { return null } // return null \n}\n\n\n// ADD OR UPDATE USERS PROFILE PIC\n// receives user id from auth and a photo string\nexport const addProfileImg = async ( uid, photo ) => {\n  try {\n    const ref = await addDoc( collection(db, \"userProfilePic\"), {\n      userId: uid,\n      photo: photo\n    })\n\n    if( ref.id ) return true\n  }\n  catch( err ) {\n    console.error(\"Adding Pic\", err );\n    return false;\n  }\n} \n\n\n// edit user account, currently can only edit firstname, lastname and phone number\nexport const updateProfileImg = async ( uid, photo ) => {\n  try {\n    const q = query( collection(db, \"userProfilePic\"),\n    where(\"userId\", \"==\", uid), limit(1));\n  \n    const ref = await getDocs( q );\n\n    var id;\n    ref.docs.map( doc => id = doc.id )\n    if( id ) {\n      const usrref = doc( db, \"userProfilePic\", id );\n        await updateDoc( usrref, {\n        photo: photo\n      });\n    } else{ console.error(\"NO IMAGE ID\") }\n  }\n  catch( err ) {\n    console.error( err )\n  }\n  \n  \n  // console.log( r )\n}\n\n\n// get user profile image from firebase\n// receives the user id from auth\nexport const getUserImg = async( uid ) => {\n  // console.log( \"HERE\", uid )\n  // make a query to get user image from user profile pic, where user id\n  // = to params user id and the limit is one\n  try {\n    const q = query( collection(db, \"userProfilePic\" ),\n    where(\"userId\", \"==\", uid ) )\n  \n    const res = await getDocs( q );\n\n    var data = [];\n    res.docs.map( doc => {\n      var d = doc.data();\n      d[\"id\"] = doc.id;\n      data.push( d )\n    })\n    // console.log( data[0] )\n    return data[0]\n  }\n  catch( err ) {\n    console.error(\"getting user profile::\", err )\n    return false;\n  }\n  \n}\n\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}