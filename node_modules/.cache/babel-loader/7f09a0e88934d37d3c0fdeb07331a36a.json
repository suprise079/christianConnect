{"ast":null,"code":"var _jsxFileName = \"/Users/malebomoleleki/Documents/GitHub/christianConnect/src/components/starRating/starRating.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { FaStar } from \"react-icons/fa\";\nimport { GiConsoleController } from \"react-icons/gi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = {\n  orange: \"yellow\",\n  grey: \"#a9a9a9\"\n};\n\nfunction Stars(props) {\n  _s();\n\n  const [currentValue, setCurrentValue] = useState(0); // const [hoverValue, setHoverValue] = useState();\n\n  const stars = Array(5).fill(0);\n\n  const handleClick = value => {\n    setCurrentValue(value);\n  };\n\n  const handleMouseOver = newHoverValue => {\n    props.setHoverValue(newHoverValue);\n  }; // const handleMouseLeave = () => {\n  // props.setHoverValue(undefined)\n  // }\n\n\n  const addStar = (index, e) => {\n    console.log(index + 1);\n    handleClick(index + 1); // props.setHoverValue(e.target.value)\n\n    console.log(props.hoverValue); // alert( currentValue )\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: stars.map((_, index) => /*#__PURE__*/_jsxDEV(FaStar, {\n      size: 15,\n      value: props.hoverValue,\n      onClick: e => addStar(index, e),\n      onMouseOver: () => handleMouseOver(index + 1),\n      onMouseLeave: () => handleMouseOver(index + 1),\n      color: (props.hoverValue || currentValue) > index ? colors.orange : colors.grey,\n      style: {\n        marginRight: 10,\n        cursor: \"pointer\"\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stars, \"J5eIfLdTUBg8kIgAXQ1bzL9IH6w=\");\n\n_c = Stars;\n;\nexport default Stars;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"sources":["/Users/malebomoleleki/Documents/GitHub/christianConnect/src/components/starRating/starRating.jsx"],"names":["useState","FaStar","GiConsoleController","colors","orange","grey","Stars","props","currentValue","setCurrentValue","stars","Array","fill","handleClick","value","handleMouseOver","newHoverValue","setHoverValue","addStar","index","e","console","log","hoverValue","map","_","marginRight","cursor"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,mBAAT,QAAoC,gBAApC;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,QADG;AAEXC,EAAAA,IAAI,EAAE;AAFK,CAAf;;AAKA,SAASC,KAAT,CAAgBC,KAAhB,EAAwB;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,CAAD,CAAhD,CADsB,CAEtB;;AAEA,QAAMU,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAd;;AAEA,QAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3BL,IAAAA,eAAe,CAACK,KAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAGC,aAAa,IAAI;AACvCT,IAAAA,KAAK,CAACU,aAAN,CAAoBD,aAApB;AACD,GAFD,CAVsB,CActB;AACE;AACF;;;AAEA,QAAME,OAAO,GAAG,CAAEC,KAAF,EAASC,CAAT,KAAgB;AAE9BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,GAAG,CAApB;AAEAN,IAAAA,WAAW,CAACM,KAAK,GAAG,CAAT,CAAX,CAJ8B,CAM9B;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACgB,UAAlB,EAP8B,CAQ9B;AACD,GATD;;AAaA,sBACE;AAAA,cAIKb,KAAK,CAACc,GAAN,CAAU,CAACC,CAAD,EAAIN,KAAJ,kBACP,QAAC,MAAD;AAEE,MAAA,IAAI,EAAE,EAFR;AAGE,MAAA,KAAK,EAAEZ,KAAK,CAACgB,UAHf;AAIE,MAAA,OAAO,EAAKH,CAAD,IAAOF,OAAO,CAACC,KAAD,EAAQC,CAAR,CAJ3B;AAKE,MAAA,WAAW,EAAE,MAAML,eAAe,CAACI,KAAK,GAAG,CAAT,CALpC;AAME,MAAA,YAAY,EAAE,MAAMJ,eAAe,CAACI,KAAK,GAAG,CAAT,CANrC;AAOE,MAAA,KAAK,EAAE,CAACZ,KAAK,CAACgB,UAAN,IAAoBf,YAArB,IAAqCW,KAArC,GAA6ChB,MAAM,CAACC,MAApD,GAA6DD,MAAM,CAACE,IAP7E;AAQE,MAAA,KAAK,EAAE;AACLqB,QAAAA,WAAW,EAAE,EADR;AAELC,QAAAA,MAAM,EAAE;AAFH;AART,OACOR,KADP;AAAA;AAAA;AAAA;AAAA,YADH;AAJL;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAvDQb,K;;KAAAA,K;AAuDR;AAED,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\nimport { FaStar } from \"react-icons/fa\";\nimport { GiConsoleController } from \"react-icons/gi\";\n\nconst colors = {\n    orange: \"yellow\",\n    grey: \"#a9a9a9\"    \n};\n\nfunction Stars( props ) {\n  const [currentValue, setCurrentValue] = useState(0);\n  // const [hoverValue, setHoverValue] = useState();\n  \n  const stars = Array(5).fill(0)\n\n  const handleClick = value => {\n    setCurrentValue(value)\n  }\n\n  const handleMouseOver = newHoverValue => {\n    props.setHoverValue(newHoverValue)\n  };\n\n  // const handleMouseLeave = () => {\n    // props.setHoverValue(undefined)\n  // }\n\n  const addStar = ( index, e ) => {\n    \n    console.log(index + 1)\n    \n    handleClick(index + 1)\n    \n    // props.setHoverValue(e.target.value)\n    console.log(props.hoverValue)\n    // alert( currentValue )\n  }\n\n\n\n  return (\n    <div>\n      \n        {/* {GiConsoleController.log(\"new value\", currentValue)} */}\n\n        {stars.map((_, index) => (\n            <FaStar\n              key={index}\n              size={15}\n              value={props.hoverValue}\n              onClick = {(e) => addStar(index, e)}\n              onMouseOver={() => handleMouseOver(index + 1)}\n              onMouseLeave={() => handleMouseOver(index + 1)}\n              color={(props.hoverValue || currentValue) > index ? colors.orange : colors.grey}\n              style={{\n                marginRight: 10,\n                cursor: \"pointer\"\n              }}\n            />\n          )\n        )}     \n      \n    </div>\n  );\n};\n\nexport default Stars;"]},"metadata":{},"sourceType":"module"}